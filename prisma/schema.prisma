generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  isAdmin       Boolean   @default(false)
  isVerified    Boolean   @default(false)
  position      String?
  message       String?

  accounts           Account[]
  sessions           Session[]
  PasswordResetToken PasswordResetToken[]
  VerificationToken  VerificationToken[]
  messages           Message[]

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiry    DateTime
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id                       String   @id @default(cuid())
  name                     String
  email                    String
  companyName              String
  companyPostCode          String
  companyPrefecture        String
  companyCity              String
  companyAddress           String
  companyPhone             String
  area                     String?
  title                    String
  budget                   Int
  planPageNumber           Int
  productTypes             String
  otherProductType         String?
  desiredFunctionTypes     String
  otherDesiredFunctionType String?
  requests                 String?
  memo                     String?
  isReceived               Boolean  @default(false)
  publishEndDate           DateTime
  referralFee              Int
  maxReferrals             Int
  isReferralAllowed        Boolean  @default(false)
  contactMethod            String
  dueDate                  DateTime

  projectCompanies ProjectCompany[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectCompany {
  id     String        @id @default(cuid())
  status ProjectStatus

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, companyId])
  @@index([projectId])
  @@index([companyId])
}

model UsageFee {
  id         String   @id @default(cuid())
  itemName   String
  unitPrice  Int
  quantity   Int
  totalPrice Int
  usageMonth DateTime

  CompanyId String
  Company   Company @relation(fields: [CompanyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([CompanyId])
}

model Message {
  id         String     @id @default(cuid())
  content    String
  senderType SenderType
  isRead     Boolean    @default(false)

  createdAt DateTime @default(now())

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

enum SenderType {
  ADMIN
  COMPANY
}

enum ProjectStatus {
  NEW
  NEGOTIATION
  REJECTED
  LOST
  RECEIVED
  DELIVERED
}

model Company {
  id                   String    @id @default(cuid())
  companyName          String
  companyEmail         String    @unique
  companyLogoUrl       String?
  companySiteUrl       String?
  companyArea          String?
  companyRepName       String?
  companyPostCode      String?
  companyPrefecture    String?
  companyCity          String?
  companyAddress       String?
  companyPrefectureMap String?
  companyCityMap       String?
  companyAddressMap    String?
  latitude             Float?
  longitude            Float?
  companyfoundDate     DateTime?
  companyPhone         String?
  companyCapital       String?
  companyEmployee      String?
  companyBusiness      String?
  companyFeature       String?
  companyPoint1        String?
  companyPoint2        String?
  companyPoint3        String?
  companyPr            String?

  users            User[]
  performances     Performance[]
  projectCompanies ProjectCompany[]
  usageFees        UsageFee[]
  messages         Message[]
  images           CompanyImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyImage {
  id  String @id @default(cuid())
  url String

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
}

model Performance {
  id       String  @id @default(cuid())
  title    String
  content  String
  imageUrl String?
  url      String?
  industry String
  genre    String
  scope    String

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([companyId])
}
